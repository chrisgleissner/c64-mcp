import test from "node:test";
import assert from "node:assert/strict";
import { compileSidwaveToPrg, compileSidwaveToSid } from "../src/sidCompiler.js";
import { parseSidwave } from "../src/sidwave.js";

const EXAMPLE = `
# yaml-language-server: $schema=https://example.com/sidwave.schema.json
sidwave: 1.0
title: "Echoes of Tomorrow"
author: "Generated by MCP"
tempo: 92
mode: PAL
voices:
  - id: 1
    waveform: pulse
    patterns:
      A:
        type: arpeggio
        notes: [C3, E3, G3, B2]
        fx: { vibrato: { depth: 0.2, rate: 5 }, pwm_sweep: { speed: 1, depth: 64 } }
  - id: 2
    waveform: triangle
    patterns:
      B:
        groove: [C2, C2, G1, C2]
  - id: 3
    waveform: sawtooth
    patterns:
      C:
        groove: [C1, C1, C1, G0]

timeline:
  - section: Intro
    bars: 8
    layers: { v1: A, v2: B, v3: C }
`;

test("SIDWAVE: compile to PRG and SID", () => {
  const doc = parseSidwave(EXAMPLE);
  const { prg } = compileSidwaveToPrg(doc);
  assert.ok(prg instanceof Buffer);
  // PRG load address may be $0801 (BASIC header) or $0810 (direct code)
  const load = prg.readUInt16LE(0);
  assert.ok(load === 0x0801 || load === 0x0810, `Unexpected load address ${load.toString(16)}`);
  const { sid } = compileSidwaveToSid(doc, prg);
  assert.ok(sid instanceof Buffer);
  assert.equal(sid.toString("ascii", 0, 4), "PSID");
  assert.ok(sid.length >= 124 + 2, `Unexpected SID length: ${sid.length}`);
});
