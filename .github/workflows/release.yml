name: Release

on:
  push:
    tags:
      - "*.*.*"  # semantic tag without 'v' prefix
  release:
    types: [published]

jobs:
  package_check_local:
    uses: ./.github/workflows/package-check.yml
    with:
      package_source: local

  build_and_publish:
    needs: package_check_local
    name: Build and publish to npm
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }} # actionlint-disable-line expr
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          registry-url: https://registry.npmjs.org

      - name: Install dependencies (clean)
        run: npm ci

      - name: Validate types and tests
        run: npm run check

      - name: Build (compile + postbuild + manifest)
        run: npm run build

      - name: Build RAG (if applicable)
        run: |
          if npm run | grep -q "build:rag"; then
            npm run build:rag
          fi

      - name: Prepare publish directory
        run: |
          set -euo pipefail
          PUB=publish
          rm -rf "$PUB" && mkdir -p "$PUB"
          cp package.json "$PUB/"
          cp README.md LICENSE "$PUB/"
          if [ -f CHANGELOG.md ]; then cp CHANGELOG.md "$PUB/"; fi
          cp mcp.json "$PUB/"
          if [ -f AGENTS.md ]; then cp AGENTS.md "$PUB/"; fi
          if [ -d .github/prompts ]; then mkdir -p "$PUB/.github" && cp -r .github/prompts "$PUB/.github/prompts"; fi
          if [ -d doc ]; then cp -r doc "$PUB/doc"; fi
          if [ -d data ]; then cp -r data "$PUB/data"; fi
          if [ -d dist ]; then cp -r dist "$PUB/dist"; fi
          # Do not copy root 'generated' to avoid duplicates with dist/generated
          if [ -d scripts ]; then cp -r scripts "$PUB/scripts"; fi
          # Generated manifest lives at repository root
          if [ -f mcp-manifest.json ]; then cp mcp-manifest.json "$PUB/"; fi
          mkdir -p "$PUB/src/rag"
          if [ -f src/rag/sources.csv ]; then cp src/rag/sources.csv "$PUB/src/rag/"; fi

      - name: npm pack (dry run)
        working-directory: publish
        run: npm pack --dry-run

      - name: Check tag vs package version
        id: version
        run: |
          TAG="${GITHUB_REF_NAME}"
          PKG_VER=$(node -p "require('./package.json').version")
          MCP_VER=$(node -p "try{require('./mcp.json').version}catch(e){''}")
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "pkg=$PKG_VER" >> $GITHUB_OUTPUT
          if [ "$TAG" != "$PKG_VER" ]; then
            echo "Tag ($TAG) does not match package.json version ($PKG_VER)" >&2
            exit 1
          fi
          if [ -n "$MCP_VER" ] && [ "$TAG" != "$MCP_VER" ]; then
            echo "Tag ($TAG) does not match mcp.json version ($MCP_VER)" >&2
            exit 1
          fi

      - name: Publish to npm
        if: ${{ github.event_name == 'push' }}
        working-directory: publish
        run: |
          if [ -z "${NPM_TOKEN:-}" ]; then
            echo "NPM_TOKEN secret not set" >&2
            exit 1
          fi
          npm config set //registry.npmjs.org/:_authToken "${NPM_TOKEN}"
          npm publish --access public

      - name: Produce distributable tarball and gather artifacts
        run: |
          PKG_NAME=$(node -p "require('./package.json').name")
          PKG_VER=$(node -p "require('./package.json').version")
          TARBALL="${PKG_NAME}-${PKG_VER}.tgz"
          (cd publish && npm pack)
          mkdir -p release_artifacts
          mv "publish/$TARBALL" release_artifacts/
          cp -r publish/doc release_artifacts/doc
          cp -r publish/data release_artifacts/data
          cp -r publish/generated release_artifacts/generated || true
          cp -r publish/dist release_artifacts/dist || true
          cp publish/mcp.json publish/README.md publish/LICENSE release_artifacts/
          if [ -f publish/CHANGELOG.md ]; then cp publish/CHANGELOG.md release_artifacts/; fi
          if [ -f publish/mcp-manifest.json ]; then cp publish/mcp-manifest.json release_artifacts/; fi

      - name: Create GitHub Release
        if: ${{ github.event_name == 'push' }}
        uses: softprops/action-gh-release@v2
        with:
          name: c64-mcp ${{ steps.version.outputs.pkg }}
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            release_artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post_release_check:
    needs: build_and_publish
    uses: ./.github/workflows/package-check.yml
    with:
      package_source: npm
