name: Release Package (Bun)

on:
  push:
    tags:
      - '*.*.*'
      - 'v*.*.*'

jobs:
  verify_local:
    uses: ./.github/workflows/package-check.yaml
    with:
      package_source: local

  release:
    needs: verify_local
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
    permissions:
      contents: write
      packages: read
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    outputs:
      pkg_version: ${{ steps.version.outputs.version }}

    steps:
      - name: Install dependencies
        run: bun install --frozen-lockfile || bun install

      - name: Build project
        run: bun run build

      - name: Determine tag version
        id: version
        run: |
          TAG="${GITHUB_REF_NAME}"
          CLEAN="${TAG#v}"
          echo "version=$CLEAN" >> "$GITHUB_OUTPUT"

      - name: Validate package version matches tag
        run: |
          TAG="${GITHUB_REF_NAME}"
          CLEAN="${TAG#v}"
          PKG_VER=$(bun -e "console.log(JSON.parse(require('fs').readFileSync('./package.json','utf8')).version)")
          MCP_VER=$(bun -e "console.log(JSON.parse(require('fs').readFileSync('./mcp.json','utf8')).version)")
          if [ "$CLEAN" != "$PKG_VER" ]; then
            echo "Tag version $CLEAN does not match package.json version $PKG_VER" >&2
            exit 1
          fi
          if [ "$CLEAN" != "$MCP_VER" ]; then
            echo "Tag version $CLEAN does not match mcp.json version $MCP_VER" >&2
            exit 1
          fi
      - name: Pack artifact
        id: pack
        run: |
          set -euo pipefail
          TARBALL=$(npm_config_ignore_scripts=false npm pack --silent)
          echo "tarball=$TARBALL" >> "$GITHUB_OUTPUT"
      - name: Upload package tarball
        uses: actions/upload-artifact@v4
        with:
          name: c64bridge-tarball
          path: ${{ steps.pack.outputs.tarball }}
      - name: Publish to npm
        if: ${{ env.NPM_TOKEN != '' }}
        run: |
          set -euo pipefail
          npm config set //registry.npmjs.org/:_authToken "$NPM_TOKEN"
          npm publish --access public

  verify_npm:
    needs:
      - release
    uses: ./.github/workflows/package-check.yaml
    with:
      package_source: npm
      package_version: ${{ needs.release.outputs.pkg_version }}
